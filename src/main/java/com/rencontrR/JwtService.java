package com.rencontrR;

import io.jsonwebtoken.*; // Importe toutes les classes utiles de la librairie JWT
import io.jsonwebtoken.security.Keys; // Permet de g√©n√©rer une cl√© secr√®te avec HMAC (utilis√©e pour signer le token
import org.springframework.stereotype.Service; // 	Dit √† Spring : ‚Äúcette classe peut √™tre inject√©e comme un service dans les contr√¥leurs‚Äù

import java.security.Key;
import java.util.Date; // Sert √† g√©rer les dates d‚Äôexpiration
import java.util.function.Function; // Utilis√© pour extraire dynamiquement des informations du token (comme l‚Äôemail)

import static javax.crypto.Cipher.SECRET_KEY;




  @Service
  public class JwtService {
// cr√©er notre Cl√© secret pour notre signature et pui on lui donne une dur√©e de vie de 24h
    private static final String SECRET_KEY = "TunNeTrouveraPasMonPswTuPeuxToujoursChercher@Tainul:D";
    private static final long EXPIRATION_TIME = 1000 * 60 * 60 * 24; // 24h

    private Key getSignInKey() {
      return Keys.hmacShaKeyFor(SECRET_KEY.getBytes());
    }
    // üîç R√©cup√®re l'email (subject) √† partir du token
    public String generateToken(String email) {
  try {
    return Jwts.builder() // 	Commence la cr√©ation du token (comme si tu disais replis ta recette )
      // et les ingredients sont tout le reste pour la faire
      .setSubject(email) // Met l'email de l'utilisateur dans le token (c'est l'identifiant principal)
      .setIssuedAt(new Date(System.currentTimeMillis())) //Date de cr√©ation du token
      .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME)) //	Date d‚Äôexpiration calcul√©e automatiquement
      .signWith(getSignInKey(), SignatureAlgorithm.HS256) // Signe le token avec ta cl√© secr√®te et l‚Äôalgorithme HS256
      .compact(); // 	Termine la construction ‚Üí retourne une String : c‚Äôest le token JWT

  }catch (Exception e){
    System.out.println("Erreur generation token : "+e.getMessage());
    return null;
  }
     }


    // üîç R√©cup√®re l'email (subject) √† partir du token
    public String extractToken(String token) {

      return extractClaim(token,Claims::getSubject);

  }
  //decoder le token puis sortir le email
    public String extractUsername(String token) {
      return extractClaim(token, Claims::getSubject);
    }
//Verification d
  public boolean isTokenValid(String token, String userEmail) {
    String email = extractUsername(token);
      return (email.equals(userEmail) && !isTokenExpired(token));
    }
//    //verifi si le token est expir√©
    private boolean isTokenExpired(String token) {
      return extractExpiration(token).before(new Date());
      }

    private Date extractExpiration(String token) {
      return extractClaim(token, Claims::getExpiration);
    }


    //    // on declar un type T pour recuperer ce qu'on le veux qui peu  avoir de different Type (date;string ,number...)
    private  <T> T extractClaim(String token, Function<Claims,T> claimsResolver) {
      final Claims claims = Jwts.parserBuilder()
        .setSigningKey(getSignInKey())
        .build()
       .parseClaimsJws(token)
        .getBody();
      return claimsResolver.apply(claims);
    }

}
//Connexion r√©ussie ‚Üí le backend g√©n√®re un JWT :
//"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
//
//‚Üí Ce token contient :
//- l‚Äôemail (subject)
//- la date de cr√©ation
//- la date d‚Äôexpiration
//- une signature secr√®te
//
//‚Üí On peut ensuite :
//- l‚Äôenvoyer au frontend
//- le v√©rifier √† chaque requ√™te prot√©g√©e
